import requests
from token_loader import read_tokens_from_file

def send_gpt_request(prompt_data: dict, url: str, api_key: str, folder_id: str) -> dict:
    headers = {"Content-Type": "application/json", "Authorization": f"Api-Key {api_key}", "x-folder-id": folder_id}

    response = requests.post(url, json=prompt_data, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None


def get_parameter(query_text: str) -> str:
    tokens = read_tokens_from_file("token.txt")
    folder_id = tokens["FOLDER_ID"]
    api_key = tokens["SecretKey"]
    gpt_text = "Твоя задача излечь из двух типов вопросов только имя или дату. Тебе на вход прийдёт два типа вопроса : Когда у {Имя} день рождение? и У кого {дата} день рождение. Я приведу тебе пример того как ты должен отвечать на эти вопросы.Тебе нужно излечь из вопроса только Имя или дату. Таким образом, если тебе на вход приходит вопрос, в котором есть дата, например: «У кого 21 декабря день рождения?», ответом на него будет дата например: {23.03} . Если же на вход поступает вопрос без даты, например:  «Когда у Миши день рождения?», то ответом будет полное {Имя}. Если ты ищещь из вопроса {имя} то преобразуй его в полное имя. Например: {Петя} -> {Пётр} , {Ваня} -> {Иван} , {Костя} -> {Константин}."
    gpt_text1 = "Извлеки из вопроса только **имя** или **дату**. Если в вопросе есть дата, верни её. Если в вопросе нет даты, извлеки только имя. Если в вопросе нет имени, верни дату. Если нет ни того, ни другого, верни 0."
    gpt_text2 = "Тебе на вход прийдёт вопрос. Тебе нужно извлечь из входного вопроса только имя или дату. Входные данные: два типа вопросов - 'Когда у {Name} день рождение ?' и 'У кого {дата} день рождение?'. Если в вопросе присутствует дата в формате {число.месяц}, вернуть её. Если во входном вопросе присутствует Имя в любом падеже ты должен распознать его и вернуть его в полном именительном падеже. Если вопрос не соответствует формату или нет имени или даты, вернуть 0. Необходимо преобразовывать имена в полные формы, используя общепринятые правила. Национальные особенности имён и фамилий не учитывать. Обработка дат осуществляется в формате ДД.ММ. Если в вопросе отсутствует дата или имя, вернуть 0.Ты должен вернуть либо {Имя}, либо {дата}, либо 0. Нельзя придумывать Имена и даты, вернуть должен только то, что есть в вопросе."
    gpt_text3 = "Тебе на вход придёт вопрос. Из входного вопроса тебе нужно извлечь либо имя, либо дату, либо ничего. Входные данные могут быть двух видов: 1. «Когда у Имя день рождение?» Должен вернуть имя. 2. «У кого Дата день рождения?» Должен вернуть дату.  Если в вопросе есть дата в формате Число.Месяц, верни её. Если во входном предложении есть имя в любом падеже, распознай его и верни его в именительном падеже (например, «Иван» вместо «Ивану», «Ивана» или «Ваней»). Если вопрос не подходит под формат или в нём нет ни имени, ни даты — верни 0 (ноль). Обрабатывай даты в формате ДД.ММ. Если дата или имя отсутствуют, верни ноль. Верни либо имя, если оно есть, либо дату в формате ДД.MM, либо ноль. Нельзя возращать дату и имена которые не содержаться в исходном вопросе."
    gpt_text4 = "Извлеки {имя} из входного вопроса и верни его в полном именительном падеже. Ты должен вернуть только {имя} в полном именительном падеже. Если в вопросе нет имени, но есть дата, то верни дату которая содержится в исходном вопросе в формате ДД.ММ. Если вопрос не подходит под формат или в нём нет даты и имени, то верни ноль."
    gpt_text5 = "Извлеки из вопроса только имя или дату. Если в вопросе указана дата в формате ДД.ММ, верни её. Если в вопросе указано имя, преобразуй его в полное имя в именительном падеже и верни. Если в вопросе нет ни имени, ни даты, верни 0. Учитывай, что формат даты ДД.ММ. Если в вопросе есть цифры, подразумеваемые как дата, возвращай их в формате {число.месяц}. Необходимо вернуть только одну из двух сущностей, первую найденную."
    gpt_text8 = "Какое имя используется в вопросе, ответ дай в формате: {Имя}. Поставь имя в полной форме именительном падеже"
    gpt_text6 = "Какое {Имя} в вопросе используют? Верни {Имя} в полном именительном падеже, если оно есть. Если в вопросе нет имени, то верни ноль. В качестве ответа верни толькко {Имя} или ноль. Не надо отвечать на вопрос"
    model_uri = f"gpt://{folder_id}/yandexgpt"
    gpt_text7 = "Какое имя используется в вопросе, какая дата указана в вопросе, если в вопросе нет даты верни 0, если в вопросе нет имени, верни 0, ответ дай в формате: Имя: {Имя} Дата: {день.месяц}. Имя должен вернуть в полном именительном падеже, как в официальных документах.Дату должен вернуть в виде {06.12} "
    completion_options = {
        "stream": False,
        "temperature": 0,
        "maxTokens": "2000"
    }

    prompt_data = {
        "modelUri": model_uri,
        "completionOptions": completion_options,
        "messages": [
            {
                "role": "system",
                "text": gpt_text7,
            }
            ,
            {
                "role": "user",
                "text": query_text,
            }
        ]
    }

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    response = send_gpt_request(prompt_data, url, api_key, folder_id)

    if response:
        return response["result"]["alternatives"][0]["message"]["text"]
    else:
        return "Ошибка при обращении к YandexGPT"
